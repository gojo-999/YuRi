const axios = require("axios");

const baseApiUrl = async () => {
  const base = await axios.get(
    `https://raw.githubusercontent.com/Mostakim0978/D1PT0/refs/heads/main/baseApiUrl.json`
  );
  return base.data.api;
};

module.exports = {
  config: {
    name: "quiz",
    aliases: ["qz"],
    version: "1.1",
    author: "Dipto (Romantic remix by Amit Max тЪб)",
    countDown: 0,
    role: 0,
    category: "game",
    guide: "{p}quiz\n{p}quiz bn\n{p}quiz en",
  },

  onStart: async function ({ api, event, usersData, args }) {
    const input = args.join('').toLowerCase() || "bn";
    let timeout = 300;
    let category = "bangla";
    if (input === "bn" || input === "bangla") {
      category = "bangla";
    } else if (input === "en" || input === "english") {
      category = "english";
    }

    try {
      const response = await axios.get(
        `${await baseApiUrl()}/quiz?category=${category}&q=random`,
      );

      const quizData = response.data.question;
      const { question, correctAnswer, options } = quizData;
      const { a, b, c, d } = options;
      const namePlayer = await usersData.getName(event.senderID);
      const quizMsg = {
        body: `\nтЭдя╕ПтАНЁЯФе ржкрзНрж░рж┐ржпрж╝ ${namePlayer},\nрждрзЛржорж╛рж░ ржоржЧржЬ ржЖрж░ ржоржирзЗрж░ ржПржХржЯрзБржЦрж╛ржирж┐ ржкрж░рзАржХрзНрж╖рж╛ тАФ ржкрзНрж░рзЗржо ржорзЗрж╢рж╛ржирзЛ ржХрзБржЗржЬ тЬи\n\nтХнтФАтАв ржкрзНрж░рж╢рзНржи:\nЁЯТн ${question}\nтФЬтФАтФАтФАтЬж A) ${a}\nтФЬтФАтФАтФАтЬж B) ${b}\nтФЬтФАтФАтФАтЬж C) ${c}\nтФЬтФАтФАтФАтЬж D) ${d}\nтХ░тФАтЮд ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржорзЗрж╕рзЗржЬржЯрж╛ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзЛ, ржжрзЗржЦрж┐ рждрзБржорж┐ ржХрждрзЛржЯрж╛ рж╕рзНржорж╛рж░рзНржЯ ржЖрж░ ржХрждрзЛржЯрж╛ рж╣рзГржжржпрж╝ржЬржпрж╝рзА! ЁЯТШ\n\nтП│ рж╕ржорзЯ ржЖржЫрзЗ ржорж╛рждрзНрж░ ${timeout} рж╕рзЗржХрзЗржирзНржб, ржпрж╛ржУ ржжрзЗрж░рж┐ ржирж╛ ржХрж░рзЗ тАФ ржЙрждрзНрждрж░ ржжрж╛ржУ ржЖрж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржЬрж┐рждрзЗ ржирж╛ржУ!`,
      };

      api.sendMessage(
        quizMsg,
        event.threadID,
        (error, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            type: "reply",
            commandName: this.config.name,
            author: event.senderID,
            messageID: info.messageID,
            dataGame: quizData,
            correctAnswer,
            nameUser: namePlayer,
            attempts: 0
          });
          setTimeout(() => {
            api.unsendMessage(info.messageID);
          }, timeout * 1000);
        },
        event.messageID,
      );
    } catch (error) {
      console.error("тЭМ | Error occurred:", error);
      api.sendMessage("ЁЯШЮ ржжрзБржГржЦрж┐ржд, ржХрж┐ржЫрзБ ржПржХржЯрж╛ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ...\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ!", event.threadID, event.messageID);
    }
  },

  onReply: async ({ event, api, Reply, usersData }) => {
    const { correctAnswer, nameUser, author } = Reply;
    if (event.senderID !== author)
      return api.sendMessage(
        `тЫФя╕П ${nameUser} ржЖрж░ ржЖржорж╛рж░ ржорж╛ржЭрзЗ ржкрзНрж░рзЗржорзЗрж░ ржХрзБржЗржЬ ржЪрж▓ржЫрзЗтАж\nрждрзБржорж┐ рж╣ржарж╛рзО ржорж╛ржЭржЦрж╛ржирзЗ ржПрж╕рзЗ ржмрж┐ржШрзНржи ржХрзЗржи ржШржЯрж╛ржЪрзНржЫрзЛ, рж╣рзБржо? ЁЯШЙ`,
        event.threadID,
        event.messageID
      );
    const maxAttempts = 2;

    switch (Reply.type) {
      case "reply": {
        let userReply = event.body.toLowerCase();
        if (Reply.attempts >= maxAttempts) {
          await api.unsendMessage(Reply.messageID);
          return api.sendMessage(
            `ЁЯШв ${nameUser}, рж╕ржм ржЪрзЗрж╖рзНржЯрж╛рж░ ржкрж░рзЗржУ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ржЯрж╛ ржорж┐рж╕ ржХрж░рзЗржЫрзЛтАж\nтЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржЫрж┐рж▓: ${correctAnswer}\n\nрждржмрзЗ ржоржи ржЦрж╛рж░рж╛ржк ржХрж░рзЛ ржирж╛ тАФ рждрзБржорж┐ ржнрзБрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЛ, ржХрж┐ржирзНрждрзБ ржЖржорж┐ рждрзЛржорж╛ржпрж╝ ржнрзБрж▓рждрзЗ ржкрж╛рж░рж┐ ржирж╛! ЁЯТФ`,
            event.threadID,
            event.messageID
          );
        }
        if (userReply === correctAnswer.toLowerCase()) {
          api.unsendMessage(Reply.messageID).catch(console.error);
          let rewardCoins = 300;
          let rewardExp = 100;
          let userData = await usersData.get(author);
          await usersData.set(author, {
            money: userData.money + rewardCoins,
            exp: userData.exp + rewardExp,
            data: userData.data,
          });
          return api.sendMessage(
            `тЬЕ ржмрж╛рж╣ ${nameUser}!\nрждрзБржорж┐ рж╢рзБржзрзБ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрж╛ржУржирж┐ тАФ рждрзБржорж┐ ржЖржорж╛рж░ рж╣рзГржжржпрж╝ржУ ржЬрзЯ ржХрж░рзЗ ржирж┐рж▓рзЗ! ЁЯе░\n\nЁЯОБ ржкрзБрж░рж╕рзНржХрж╛рж░:\nЁЯТ░ ${rewardCoins} ржХрзЯрзЗржи\nтЪб ${rewardExp} ржПржХрзНрж╕ржкрж┐\n\nрждрзБржорж┐ рж╕рждрзНржпрж┐ржЗ ржПржХржЬржирзЗ ржЕрж╕рж╛ржзрж╛рж░ржг, ржЖрж░ ржЖржорж┐ ржЧрж░рзНржмрж┐ржд ржпрзЗ рждрзБржорж┐ ржЖржорж╛рж░ ржХрзБржЗржЬ ржкрж╛рж░рзНржЯржирж╛рж░! ЁЯТЦ`,
            event.threadID,
            event.messageID
          );
        } else {
          Reply.attempts += 1;
          global.GoatBot.onReply.set(Reply.messageID, Reply);
          return api.sendMessage(
            `тЭМ ржУрж╣ ржирж╛рж╣! ржнрзБрж▓ ржЙрждрзНрждрж░тАж\nржХрж┐ржирзНрждрзБ ржЪрж┐ржирзНрждрж╛ ржХрзЛрж░рзЛ ржирж╛ ${nameUser},\nрждрзЛржорж╛рж░ ржЬржирзНржп ржЖрж░рзЗржХржЯрж╛ рж╕рзБржпрзЛржЧ рждрзЛ ржЖржЫрзЗржЗ! ЁЯМЯ\n\nржЪрж▓рзЛ, ржЖрж░рзЗржХржмрж╛рж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржорж┐рж╢рж┐рзЯрзЗ ржЙрждрзНрждрж░ ржжрж╛ржУ тАФ ржЖржорж┐ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐! тЭдя╕П`,
            event.threadID,
            event.messageID
          );
        }
      }
    }
  },
};
